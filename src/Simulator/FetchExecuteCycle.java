package Simulator;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.text.JTextComponent;

public class FetchExecuteCycle extends javax.swing.JFrame {
    //int[] MainMemory = new int[] {0x1004, 0x5002, 0x2004, 0x0FFA , 0x0012, 0x00A4, 0x0000, 0x0000,}; //Maim Memory Array
    int[] MainMemory = new int[] {13, 54, 24, 0x0012, 0x00A4}; //Maim Memory Array

    int programCounter=0; //Program Counter Register
    int A; //Register A
    int B; //Register B
    int MAR; //Memory Address Register.
    int MBR; //Memory Buffer Register.
    int IR; //Instruction Register.
    int CU; //Control Unit.
    int operand; //Var for 
    int ALUx;
    int ALUy;
    int Results;
    int opcode;
    
    int memoryLength = MainMemory.length;

    Object memoryTable[][];
    static JTextComponent textComponent = new JTextPane();
    static JFrame frame = new JFrame("Program Status");
        
    public FetchExecuteCycle() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Registers1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        PClabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        IRlabel = new javax.swing.JLabel();
        Registers2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        MARlabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        MBRlabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        Alabel = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Blabel = new javax.swing.JLabel();
        ALU = new javax.swing.JPanel();
        Xlabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Ylabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        RESULTlabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        RESULTlabel1 = new javax.swing.JLabel();
        Memory = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fillMemory();
        jTable2 = new javax.swing.JTable();
        ControlUnit = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        CUlabel = new javax.swing.JLabel();
        viewInstruction = new javax.swing.JLabel();
        fetchButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RSK Simulator");
        setBackground(new java.awt.Color(26, 149, 57));
        setLocationByPlatform(true);
        setResizable(false);

        Registers1.setBackground(new java.awt.Color(153, 255, 255));
        Registers1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setForeground(new java.awt.Color(204, 0, 51));
        jLabel6.setText("PC");

        PClabel.setBackground(new java.awt.Color(255, 255, 255));
        PClabel.setText(Integer.toString(programCounter));

        jLabel9.setForeground(new java.awt.Color(204, 0, 51));
        jLabel9.setText("IR");

        IRlabel.setText("00");

        org.jdesktop.layout.GroupLayout Registers1Layout = new org.jdesktop.layout.GroupLayout(Registers1);
        Registers1.setLayout(Registers1Layout);
        Registers1Layout.setHorizontalGroup(
            Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Registers1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(jLabel9))
                .add(40, 40, 40)
                .add(Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(IRlabel)
                    .add(PClabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Registers1Layout.setVerticalGroup(
            Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Registers1Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(PClabel))
                .add(29, 29, 29)
                .add(Registers1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(IRlabel))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        Registers2.setBackground(new java.awt.Color(153, 255, 255));
        Registers2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel13.setForeground(new java.awt.Color(204, 0, 51));
        jLabel13.setText("MAR");

        MARlabel.setText("00");

        jLabel15.setForeground(new java.awt.Color(204, 0, 51));
        jLabel15.setText("MBR");

        MBRlabel.setText("00");

        jLabel16.setForeground(new java.awt.Color(204, 0, 51));
        jLabel16.setText("A");

        Alabel.setText("00");

        jLabel18.setForeground(new java.awt.Color(204, 0, 51));
        jLabel18.setText("B");

        Blabel.setText("00");

        org.jdesktop.layout.GroupLayout Registers2Layout = new org.jdesktop.layout.GroupLayout(Registers2);
        Registers2.setLayout(Registers2Layout);
        Registers2Layout.setHorizontalGroup(
            Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Registers2Layout.createSequentialGroup()
                .addContainerGap()
                .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Registers2Layout.createSequentialGroup()
                        .add(jLabel13)
                        .add(18, 18, 18)
                        .add(MARlabel))
                    .add(Registers2Layout.createSequentialGroup()
                        .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel15)
                            .add(jLabel16)
                            .add(jLabel18))
                        .add(18, 18, 18)
                        .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Blabel)
                            .add(Alabel)
                            .add(MBRlabel))))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        Registers2Layout.setVerticalGroup(
            Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Registers2Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(MARlabel))
                .add(18, 18, 18)
                .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(MBRlabel))
                .add(18, 18, 18)
                .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(Alabel))
                .add(18, 18, 18)
                .add(Registers2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(Blabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ALU.setBackground(new java.awt.Color(153, 255, 255));
        ALU.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Xlabel.setText("00");

        jLabel3.setForeground(new java.awt.Color(204, 0, 51));
        jLabel3.setText("X");

        Ylabel.setText("00");

        jLabel8.setForeground(new java.awt.Color(204, 0, 51));
        jLabel8.setText("Y");

        RESULTlabel.setText("0000");

        jLabel4.setForeground(new java.awt.Color(204, 0, 51));
        jLabel4.setText("RESULT");

        RESULTlabel1.setForeground(new java.awt.Color(51, 204, 0));
        RESULTlabel1.setText("ALU");

        org.jdesktop.layout.GroupLayout ALULayout = new org.jdesktop.layout.GroupLayout(ALU);
        ALU.setLayout(ALULayout);
        ALULayout.setHorizontalGroup(
            ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ALULayout.createSequentialGroup()
                .add(ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(ALULayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(ALULayout.createSequentialGroup()
                        .addContainerGap()
                        .add(Xlabel)
                        .add(29, 29, 29)
                        .add(RESULTlabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)))
                .add(ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ALULayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(Ylabel))
                .addContainerGap())
            .add(ALULayout.createSequentialGroup()
                .add(51, 51, 51)
                .add(RESULTlabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, ALULayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(34, 34, 34))
        );
        ALULayout.setVerticalGroup(
            ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ALULayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Xlabel)
                    .add(Ylabel)
                    .add(RESULTlabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ALULayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RESULTlabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .add(24, 24, 24))
        );

        Memory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Memory", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(51, 153, 0))); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            memoryTable, new String [] {"Address", "Data"}
        ));
        jTable2.setRowSelectionAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        org.jdesktop.layout.GroupLayout MemoryLayout = new org.jdesktop.layout.GroupLayout(Memory);
        Memory.setLayout(MemoryLayout);
        MemoryLayout.setHorizontalGroup(
            MemoryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, MemoryLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        MemoryLayout.setVerticalGroup(
            MemoryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MemoryLayout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        ControlUnit.setBackground(new java.awt.Color(204, 255, 255));
        ControlUnit.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel10.setForeground(new java.awt.Color(204, 0, 51));
        jLabel10.setText("CU");

        CUlabel.setText("00");

        viewInstruction.setForeground(new java.awt.Color(0, 51, 255));
        viewInstruction.setText("NULL");

        org.jdesktop.layout.GroupLayout ControlUnitLayout = new org.jdesktop.layout.GroupLayout(ControlUnit);
        ControlUnit.setLayout(ControlUnitLayout);
        ControlUnitLayout.setHorizontalGroup(
            ControlUnitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ControlUnitLayout.createSequentialGroup()
                .addContainerGap()
                .add(ControlUnitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(viewInstruction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ControlUnitLayout.createSequentialGroup()
                        .add(89, 89, 89)
                        .add(jLabel10)
                        .add(18, 18, 18)
                        .add(CUlabel)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        ControlUnitLayout.setVerticalGroup(
            ControlUnitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ControlUnitLayout.createSequentialGroup()
                .addContainerGap()
                .add(ControlUnitLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(CUlabel))
                .add(18, 18, 18)
                .add(viewInstruction)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        fetchButton.setText("Fetch");
        fetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.setEnabled(false);
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Status:");

        statusLabel.setForeground(new java.awt.Color(255, 255, 0));
        statusLabel.setText("Welcome");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(ControlUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(layout.createSequentialGroup()
                                        .add(resetButton)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(exitButton))
                                    .add(Registers1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 125, Short.MAX_VALUE)
                                .add(Registers2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(18, 18, 18))
                    .add(layout.createSequentialGroup()
                        .add(298, 298, 298)
                        .add(ALU, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Memory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(fetchButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(executeButton)))
                .add(14, 14, 14))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(18, 18, 18)
                .add(statusLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {executeButton, fetchButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(Registers2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Memory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(fetchButton)
                                    .add(executeButton)))
                            .add(ALU, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(statusLabel))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(resetButton)
                            .add(exitButton))
                        .add(18, 18, 18)
                        .add(Registers1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(ControlUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(197, 197, 197))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchButtonActionPerformed
        fetchButton.setEnabled(false);
        if (programCounter<=MainMemory.length/2) {
            System.out.println("\n");
            statusLabel.setText("Fetching Instruction");
            System.out.println("Copying data from Program Counter to Memory Address Register");
            MAR = programCounter;
            MARlabel.setText(Integer.toString(MAR));
            System.out.println("Incrementing Program Counter");
            programCounter++;
            PClabel.setText(Integer.toString(programCounter));
            System.out.println("Searching Memory");
            System.out.println("Copying data from Main Memory into Memory Buffer Register");
            MBR = MainMemory[MAR];
            MBRlabel.setText(Integer.toString(MBR));
            System.out.println("Copying instruction to Instruction Register");
            IR = MBR;
            IRlabel.setText(Integer.toString(IR));
            System.out.println("Decoding Instruction");
            statusLabel.setText("Done Fetching");
            Decode(); 
            executeButton.setEnabled(true);
        }
        else {
            statusLabel.setText("No more instructions, Hit RESET");
            fetchButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_fetchButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        executeButton.setEnabled(false);
        System.out.println("\n");
        statusLabel.setText("Executing Instruction");
        switch (opcode){
            case 1: //Load A from memory
                System.out.println("Copying Operand from memory into Register A");
                A = MainMemory[operand];
                Alabel.setText(Integer.toString(A));
                break;
            case 2: //Store B into memory
                System.out.println("Copying data Register B into the Memory Buffer Address");
                MBR = B;
                MBRlabel.setText(Integer.toString(MBR));
                System.out.println("Putting the address/Operand into the Memory Address Register");
                MAR = operand;
                MARlabel.setText(Integer.toString(MAR));
                System.out.println("Copying data from MBR into the Memory Address of the MAR");
                MainMemory[MAR] = MBR;
                memoryTable[MAR][1] = MBR;
                jTable2.setModel(new javax.swing.table.DefaultTableModel(memoryTable, new String [] {"Address", "Data"}));
                break;
            case 5: //Add A and memory, Store in B
                System.out.println("Copying data from Register A into the ALUx register");
                ALUx = A;
                Xlabel.setText(Integer.toString(ALUx));
                System.out.println("Copying data from the address of the Main Memory into the ALUy register");
                ALUy = MainMemory[operand];
                Ylabel.setText(Integer.toString(ALUy));
                System.out.println("Running Calculations and stores in the the Results Register");
                Results = ALUx+ALUy;
                RESULTlabel.setText(Integer.toString(Results));
                System.out.println("Copying data from the Results Register into the B register");
                B = Results;
                Blabel.setText(Integer.toString(B));
                break;  
        }
        statusLabel.setText("Done Executing");
        fetchButton.setEnabled(true);
    }//GEN-LAST:event_executeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        programCounter=0;
        PClabel.setText(Integer.toString(programCounter));
        IRlabel.setText("00");
        CUlabel.setText("00");
        viewInstruction.setText("Null");
        MARlabel.setText("00");
        MBRlabel.setText("00");
        Alabel.setText("00");
        Blabel.setText("00");
        Xlabel.setText("00");
        Ylabel.setText("00");
        RESULTlabel.setText("00");
        statusLabel.setText("Program Reset");
        
        textComponent.selectAll();
        textComponent.setText("");
        frame.repaint();
        
        fetchButton.setEnabled(true);
        executeButton.setEnabled(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    
    /*
    public void Execute() {  
        
        
           
    public static final short halt     = 0x00; // 00 000 000 LOAD A from memory
    public static final short loadA   = 0x20; // 00 100 xxx ADD A and operand
    public static final short addA  = 0x10; // 00 010 xxx Store
    public static final short call    = 0x40; // 01 xxx xxx
    public static final short addcc   = 0x90; // 10 010 000
    public static final short andcc   = 0x91; // 10 010 001
    public static final short orcc    = 0x92; // 10 010 010
    public static final short orncc   = 0x96; // 10 010 110
    public static final short srl     = 0xA6; // 10 100 110
    public static final short jmpl    = 0xB8; // 10 111 000
    public static final short ld      = 0xC0; // 11 000 000
    public static final short st      = 0xC4; // 11 000 100
    
    op      = (short)((registers[IR] >> 30) & 0x003);
      op2     = (short)((registers[IR] >> 22) & 0x007);
      op3     = (short)((registers[IR] >> 19) & 0x03F);
           
        
    }*/
    
    public void Decode(){
        /*
        byte[] instruction = GetBytes(IR); //Get Opcode
        CU=instruction[0];
        CUlabel.setText(String.format ("%d", instruction[1]));//(Byte.toString(instruction[1]));
        viewInstruction.setText("instruction");
        operand = instruction[1];
        */
        System.out.println("\n");
        opcode = Integer.parseInt(Integer.toString(IR).substring(0, 1));
        System.out.println("The OPCODE is " + opcode);
        operand = Integer.parseInt(Integer.toString(IR).substring(1, 2));
        System.out.println("The OPERAND/S is/are " + operand);
        CU = opcode;
        CUlabel.setText(Integer.toString(opcode));
        
        switch (opcode){
            case 1:
                viewInstruction.setText("Load A from memory");
                break;
            case 2:
                viewInstruction.setText("Store B into memory");
                break;
            case 5:
                viewInstruction.setText("Add A and memory, Store in B");
                break;
        }
    }
    
    public static void ShowMessages(){
        JScrollPane scrollPane = new JScrollPane( textComponent );
        MessageConsole console = new MessageConsole(textComponent);
        JFrame.setDefaultLookAndFeelDecorated(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );
        frame.getContentPane().add( scrollPane );
        frame.setSize(600, 800);
        frame.setLocation(1000, 200);
        frame.setVisible(true);

        console.redirectOut();
        console.setMessageLines(100); 
    }
    
    public void fillMemory (){
        for (int i=0; i<memoryLength; i++) {
            // memoryTable [][]= {{i,Integer.toHexString(MainMemory[i])}};
             /*
                                 {1,MainMemory[1]},
                                 {2,MainMemory[2]},
                                 {3,MainMemory[3]},
                                 {4,Integer.toHexString(MainMemory[4])}
            };
*/
        }
    }
    
    
    public static byte[] GetBytes(int value){
        ByteBuffer buffer = ByteBuffer.allocate(4).order(ByteOrder.nativeOrder());
        buffer.putInt(value);
        return buffer.array();
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FetchExecuteCycle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FetchExecuteCycle().setVisible(true);
            }
        });
        
        ShowMessages(); //Show Status Message Box
                
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ALU;
    private javax.swing.JLabel Alabel;
    private javax.swing.JLabel Blabel;
    private javax.swing.JLabel CUlabel;
    private javax.swing.JPanel ControlUnit;
    private javax.swing.JLabel IRlabel;
    private javax.swing.JLabel MARlabel;
    private javax.swing.JLabel MBRlabel;
    private javax.swing.JPanel Memory;
    private javax.swing.JLabel PClabel;
    private javax.swing.JLabel RESULTlabel;
    private javax.swing.JLabel RESULTlabel1;
    private javax.swing.JPanel Registers1;
    private javax.swing.JPanel Registers2;
    private javax.swing.JLabel Xlabel;
    private javax.swing.JLabel Ylabel;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton fetchButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel viewInstruction;
    // End of variables declaration//GEN-END:variables
    
}
